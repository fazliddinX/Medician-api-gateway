// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: helath/lifestyle.proto

package healthAnalytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LifestyleService_AddLifestyleData_FullMethodName    = "/health.LifestyleService/AddLifestyleData"
	LifestyleService_GetLifestyleData_FullMethodName    = "/health.LifestyleService/GetLifestyleData"
	LifestyleService_GetAllLifestyleData_FullMethodName = "/health.LifestyleService/GetAllLifestyleData"
	LifestyleService_UpdateLifestyleData_FullMethodName = "/health.LifestyleService/UpdateLifestyleData"
	LifestyleService_DeleteLifestyleData_FullMethodName = "/health.LifestyleService/DeleteLifestyleData"
)

// LifestyleServiceClient is the client API for LifestyleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LifestyleServiceClient interface {
	AddLifestyleData(ctx context.Context, in *Lifestyle, opts ...grpc.CallOption) (*LifestyleResponse, error)
	GetLifestyleData(ctx context.Context, in *LifestyleID, opts ...grpc.CallOption) (*LifestyleResponse, error)
	GetAllLifestyleData(ctx context.Context, in *LifestyleFilter, opts ...grpc.CallOption) (*AllLifestyles, error)
	UpdateLifestyleData(ctx context.Context, in *UpdateLifestyle, opts ...grpc.CallOption) (*LifestyleResponse, error)
	DeleteLifestyleData(ctx context.Context, in *LifestyleID, opts ...grpc.CallOption) (*Message, error)
}

type lifestyleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLifestyleServiceClient(cc grpc.ClientConnInterface) LifestyleServiceClient {
	return &lifestyleServiceClient{cc}
}

func (c *lifestyleServiceClient) AddLifestyleData(ctx context.Context, in *Lifestyle, opts ...grpc.CallOption) (*LifestyleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LifestyleResponse)
	err := c.cc.Invoke(ctx, LifestyleService_AddLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifestyleServiceClient) GetLifestyleData(ctx context.Context, in *LifestyleID, opts ...grpc.CallOption) (*LifestyleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LifestyleResponse)
	err := c.cc.Invoke(ctx, LifestyleService_GetLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifestyleServiceClient) GetAllLifestyleData(ctx context.Context, in *LifestyleFilter, opts ...grpc.CallOption) (*AllLifestyles, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllLifestyles)
	err := c.cc.Invoke(ctx, LifestyleService_GetAllLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifestyleServiceClient) UpdateLifestyleData(ctx context.Context, in *UpdateLifestyle, opts ...grpc.CallOption) (*LifestyleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LifestyleResponse)
	err := c.cc.Invoke(ctx, LifestyleService_UpdateLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifestyleServiceClient) DeleteLifestyleData(ctx context.Context, in *LifestyleID, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, LifestyleService_DeleteLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LifestyleServiceServer is the server API for LifestyleService service.
// All implementations must embed UnimplementedLifestyleServiceServer
// for forward compatibility
type LifestyleServiceServer interface {
	AddLifestyleData(context.Context, *Lifestyle) (*LifestyleResponse, error)
	GetLifestyleData(context.Context, *LifestyleID) (*LifestyleResponse, error)
	GetAllLifestyleData(context.Context, *LifestyleFilter) (*AllLifestyles, error)
	UpdateLifestyleData(context.Context, *UpdateLifestyle) (*LifestyleResponse, error)
	DeleteLifestyleData(context.Context, *LifestyleID) (*Message, error)
	mustEmbedUnimplementedLifestyleServiceServer()
}

// UnimplementedLifestyleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLifestyleServiceServer struct {
}

func (UnimplementedLifestyleServiceServer) AddLifestyleData(context.Context, *Lifestyle) (*LifestyleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLifestyleData not implemented")
}
func (UnimplementedLifestyleServiceServer) GetLifestyleData(context.Context, *LifestyleID) (*LifestyleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLifestyleData not implemented")
}
func (UnimplementedLifestyleServiceServer) GetAllLifestyleData(context.Context, *LifestyleFilter) (*AllLifestyles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLifestyleData not implemented")
}
func (UnimplementedLifestyleServiceServer) UpdateLifestyleData(context.Context, *UpdateLifestyle) (*LifestyleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLifestyleData not implemented")
}
func (UnimplementedLifestyleServiceServer) DeleteLifestyleData(context.Context, *LifestyleID) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLifestyleData not implemented")
}
func (UnimplementedLifestyleServiceServer) mustEmbedUnimplementedLifestyleServiceServer() {}

// UnsafeLifestyleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LifestyleServiceServer will
// result in compilation errors.
type UnsafeLifestyleServiceServer interface {
	mustEmbedUnimplementedLifestyleServiceServer()
}

func RegisterLifestyleServiceServer(s grpc.ServiceRegistrar, srv LifestyleServiceServer) {
	s.RegisterService(&LifestyleService_ServiceDesc, srv)
}

func _LifestyleService_AddLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lifestyle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifestyleServiceServer).AddLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifestyleService_AddLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifestyleServiceServer).AddLifestyleData(ctx, req.(*Lifestyle))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifestyleService_GetLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifestyleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifestyleServiceServer).GetLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifestyleService_GetLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifestyleServiceServer).GetLifestyleData(ctx, req.(*LifestyleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifestyleService_GetAllLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifestyleFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifestyleServiceServer).GetAllLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifestyleService_GetAllLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifestyleServiceServer).GetAllLifestyleData(ctx, req.(*LifestyleFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifestyleService_UpdateLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLifestyle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifestyleServiceServer).UpdateLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifestyleService_UpdateLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifestyleServiceServer).UpdateLifestyleData(ctx, req.(*UpdateLifestyle))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifestyleService_DeleteLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifestyleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifestyleServiceServer).DeleteLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifestyleService_DeleteLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifestyleServiceServer).DeleteLifestyleData(ctx, req.(*LifestyleID))
	}
	return interceptor(ctx, in, info, handler)
}

// LifestyleService_ServiceDesc is the grpc.ServiceDesc for LifestyleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LifestyleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.LifestyleService",
	HandlerType: (*LifestyleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLifestyleData",
			Handler:    _LifestyleService_AddLifestyleData_Handler,
		},
		{
			MethodName: "GetLifestyleData",
			Handler:    _LifestyleService_GetLifestyleData_Handler,
		},
		{
			MethodName: "GetAllLifestyleData",
			Handler:    _LifestyleService_GetAllLifestyleData_Handler,
		},
		{
			MethodName: "UpdateLifestyleData",
			Handler:    _LifestyleService_UpdateLifestyleData_Handler,
		},
		{
			MethodName: "DeleteLifestyleData",
			Handler:    _LifestyleService_DeleteLifestyleData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helath/lifestyle.proto",
}
