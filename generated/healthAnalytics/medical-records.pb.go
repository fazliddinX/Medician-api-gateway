// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.1
// source: helath/medical-records.proto

package healthAnalytics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListMedicalRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicalRecords []*MedicalRecord `protobuf:"bytes,1,rep,name=medicalRecords,proto3" json:"medicalRecords,omitempty"`
}

func (x *ListMedicalRecord) Reset() {
	*x = ListMedicalRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_medical_records_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicalRecord) ProtoMessage() {}

func (x *ListMedicalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_helath_medical_records_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicalRecord.ProtoReflect.Descriptor instead.
func (*ListMedicalRecord) Descriptor() ([]byte, []int) {
	return file_helath_medical_records_proto_rawDescGZIP(), []int{0}
}

func (x *ListMedicalRecord) GetMedicalRecords() []*MedicalRecord {
	if x != nil {
		return x.MedicalRecords
	}
	return nil
}

type MedicalRecordFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit       int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DoctorId    string `protobuf:"bytes,4,opt,name=doctorId,proto3" json:"doctorId,omitempty"`
}

func (x *MedicalRecordFilter) Reset() {
	*x = MedicalRecordFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_medical_records_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalRecordFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecordFilter) ProtoMessage() {}

func (x *MedicalRecordFilter) ProtoReflect() protoreflect.Message {
	mi := &file_helath_medical_records_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecordFilter.ProtoReflect.Descriptor instead.
func (*MedicalRecordFilter) Descriptor() ([]byte, []int) {
	return file_helath_medical_records_proto_rawDescGZIP(), []int{1}
}

func (x *MedicalRecordFilter) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MedicalRecordFilter) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MedicalRecordFilter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MedicalRecordFilter) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

type Message1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Message1) Reset() {
	*x = Message1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_medical_records_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message1) ProtoMessage() {}

func (x *Message1) ProtoReflect() protoreflect.Message {
	mi := &file_helath_medical_records_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message1.ProtoReflect.Descriptor instead.
func (*Message1) Descriptor() ([]byte, []int) {
	return file_helath_medical_records_proto_rawDescGZIP(), []int{2}
}

func (x *Message1) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateMedicalRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RecordType string `protobuf:"bytes,2,opt,name=recordType,proto3" json:"recordType,omitempty"`
	RecordDate string `protobuf:"bytes,3,opt,name=recordDate,proto3" json:"recordDate,omitempty"`
}

func (x *UpdateMedicalRecordReq) Reset() {
	*x = UpdateMedicalRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_medical_records_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedicalRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedicalRecordReq) ProtoMessage() {}

func (x *UpdateMedicalRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_helath_medical_records_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedicalRecordReq.ProtoReflect.Descriptor instead.
func (*UpdateMedicalRecordReq) Descriptor() ([]byte, []int) {
	return file_helath_medical_records_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateMedicalRecordReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateMedicalRecordReq) GetRecordType() string {
	if x != nil {
		return x.RecordType
	}
	return ""
}

func (x *UpdateMedicalRecordReq) GetRecordDate() string {
	if x != nil {
		return x.RecordDate
	}
	return ""
}

type MedicalRecordID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MedicalRecordID) Reset() {
	*x = MedicalRecordID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_medical_records_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalRecordID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecordID) ProtoMessage() {}

func (x *MedicalRecordID) ProtoReflect() protoreflect.Message {
	mi := &file_helath_medical_records_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecordID.ProtoReflect.Descriptor instead.
func (*MedicalRecordID) Descriptor() ([]byte, []int) {
	return file_helath_medical_records_proto_rawDescGZIP(), []int{4}
}

func (x *MedicalRecordID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddMedicalRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	RecordType  string   `protobuf:"bytes,3,opt,name=recordType,proto3" json:"recordType,omitempty"`
	RecordDate  string   `protobuf:"bytes,4,opt,name=recordDate,proto3" json:"recordDate,omitempty"`
	Description string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	DoctorId    string   `protobuf:"bytes,6,opt,name=doctorId,proto3" json:"doctorId,omitempty"`
	Attachments []string `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *AddMedicalRecordRequest) Reset() {
	*x = AddMedicalRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_medical_records_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMedicalRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMedicalRecordRequest) ProtoMessage() {}

func (x *AddMedicalRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_helath_medical_records_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMedicalRecordRequest.ProtoReflect.Descriptor instead.
func (*AddMedicalRecordRequest) Descriptor() ([]byte, []int) {
	return file_helath_medical_records_proto_rawDescGZIP(), []int{5}
}

func (x *AddMedicalRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddMedicalRecordRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddMedicalRecordRequest) GetRecordType() string {
	if x != nil {
		return x.RecordType
	}
	return ""
}

func (x *AddMedicalRecordRequest) GetRecordDate() string {
	if x != nil {
		return x.RecordDate
	}
	return ""
}

func (x *AddMedicalRecordRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddMedicalRecordRequest) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *AddMedicalRecordRequest) GetAttachments() []string {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type MedicalRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	RecordType  string   `protobuf:"bytes,3,opt,name=recordType,proto3" json:"recordType,omitempty"`
	RecordDate  string   `protobuf:"bytes,4,opt,name=recordDate,proto3" json:"recordDate,omitempty"`
	Description string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	DoctorId    string   `protobuf:"bytes,6,opt,name=doctorId,proto3" json:"doctorId,omitempty"`
	Attachments []string `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"`
	CreatedAt   string   `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   string   `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *MedicalRecord) Reset() {
	*x = MedicalRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_medical_records_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecord) ProtoMessage() {}

func (x *MedicalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_helath_medical_records_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecord.ProtoReflect.Descriptor instead.
func (*MedicalRecord) Descriptor() ([]byte, []int) {
	return file_helath_medical_records_proto_rawDescGZIP(), []int{6}
}

func (x *MedicalRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MedicalRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MedicalRecord) GetRecordType() string {
	if x != nil {
		return x.RecordType
	}
	return ""
}

func (x *MedicalRecord) GetRecordDate() string {
	if x != nil {
		return x.RecordDate
	}
	return ""
}

func (x *MedicalRecord) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MedicalRecord) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *MedicalRecord) GetAttachments() []string {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *MedicalRecord) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *MedicalRecord) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_helath_medical_records_proto protoreflect.FileDescriptor

var file_helath_medical_records_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x68, 0x65, 0x6c, 0x61, 0x74, 0x68, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x52, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x24,
	0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x68, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x21,
	0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0x85, 0x03, 0x0a, 0x15,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x1a, 0x15,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x4c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x1b, 0x5a, 0x19, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_helath_medical_records_proto_rawDescOnce sync.Once
	file_helath_medical_records_proto_rawDescData = file_helath_medical_records_proto_rawDesc
)

func file_helath_medical_records_proto_rawDescGZIP() []byte {
	file_helath_medical_records_proto_rawDescOnce.Do(func() {
		file_helath_medical_records_proto_rawDescData = protoimpl.X.CompressGZIP(file_helath_medical_records_proto_rawDescData)
	})
	return file_helath_medical_records_proto_rawDescData
}

var file_helath_medical_records_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_helath_medical_records_proto_goTypes = []any{
	(*ListMedicalRecord)(nil),       // 0: health.ListMedicalRecord
	(*MedicalRecordFilter)(nil),     // 1: health.MedicalRecordFilter
	(*Message1)(nil),                // 2: health.Message1
	(*UpdateMedicalRecordReq)(nil),  // 3: health.UpdateMedicalRecordReq
	(*MedicalRecordID)(nil),         // 4: health.MedicalRecordID
	(*AddMedicalRecordRequest)(nil), // 5: health.AddMedicalRecordRequest
	(*MedicalRecord)(nil),           // 6: health.MedicalRecord
}
var file_helath_medical_records_proto_depIdxs = []int32{
	6, // 0: health.ListMedicalRecord.medicalRecords:type_name -> health.MedicalRecord
	5, // 1: health.MedicalRecordsService.AddMedicalRecord:input_type -> health.AddMedicalRecordRequest
	4, // 2: health.MedicalRecordsService.GetMedicalRecord:input_type -> health.MedicalRecordID
	3, // 3: health.MedicalRecordsService.UpdateMedicalRecord:input_type -> health.UpdateMedicalRecordReq
	4, // 4: health.MedicalRecordsService.DeleteMedicalRecord:input_type -> health.MedicalRecordID
	1, // 5: health.MedicalRecordsService.ListMedicalRecords:input_type -> health.MedicalRecordFilter
	6, // 6: health.MedicalRecordsService.AddMedicalRecord:output_type -> health.MedicalRecord
	6, // 7: health.MedicalRecordsService.GetMedicalRecord:output_type -> health.MedicalRecord
	6, // 8: health.MedicalRecordsService.UpdateMedicalRecord:output_type -> health.MedicalRecord
	2, // 9: health.MedicalRecordsService.DeleteMedicalRecord:output_type -> health.Message1
	0, // 10: health.MedicalRecordsService.ListMedicalRecords:output_type -> health.ListMedicalRecord
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_helath_medical_records_proto_init() }
func file_helath_medical_records_proto_init() {
	if File_helath_medical_records_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_helath_medical_records_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListMedicalRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_medical_records_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MedicalRecordFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_medical_records_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Message1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_medical_records_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMedicalRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_medical_records_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MedicalRecordID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_medical_records_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AddMedicalRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_medical_records_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MedicalRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_helath_medical_records_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_helath_medical_records_proto_goTypes,
		DependencyIndexes: file_helath_medical_records_proto_depIdxs,
		MessageInfos:      file_helath_medical_records_proto_msgTypes,
	}.Build()
	File_helath_medical_records_proto = out.File
	file_helath_medical_records_proto_rawDesc = nil
	file_helath_medical_records_proto_goTypes = nil
	file_helath_medical_records_proto_depIdxs = nil
}
