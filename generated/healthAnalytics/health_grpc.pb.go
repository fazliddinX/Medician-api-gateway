// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: helath/health.proto

package healthAnalytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HealthRecommendationsService_GenerateHealthRecommendations_FullMethodName = "/health.HealthRecommendationsService/GenerateHealthRecommendations"
	HealthRecommendationsService_GetHealthRecommendations_FullMethodName      = "/health.HealthRecommendationsService/GetHealthRecommendations"
	HealthRecommendationsService_GetAllHealthRecommendations_FullMethodName   = "/health.HealthRecommendationsService/GetAllHealthRecommendations"
	HealthRecommendationsService_GetRealtimeHealthMonitoring_FullMethodName   = "/health.HealthRecommendationsService/GetRealtimeHealthMonitoring"
	HealthRecommendationsService_GetDailyHealthSummary_FullMethodName         = "/health.HealthRecommendationsService/GetDailyHealthSummary"
	HealthRecommendationsService_GetWeeklyHealthSummary_FullMethodName        = "/health.HealthRecommendationsService/GetWeeklyHealthSummary"
)

// HealthRecommendationsServiceClient is the client API for HealthRecommendationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthRecommendationsServiceClient interface {
	// ----------------- Health Recommendations --------------------
	GenerateHealthRecommendations(ctx context.Context, in *HealthRecommendationReq, opts ...grpc.CallOption) (*HealthRecommendation, error)
	GetHealthRecommendations(ctx context.Context, in *HealthRecommendationID, opts ...grpc.CallOption) (*HealthRecommendation, error)
	GetAllHealthRecommendations(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserHealthRecommendation, error)
	// ----------------- Health Monitoring -----------------------
	GetRealtimeHealthMonitoring(ctx context.Context, in *Void, opts ...grpc.CallOption) (*MonitoringRealTime, error)
	GetDailyHealthSummary(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Monitoring, error)
	GetWeeklyHealthSummary(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Monitoring, error)
}

type healthRecommendationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthRecommendationsServiceClient(cc grpc.ClientConnInterface) HealthRecommendationsServiceClient {
	return &healthRecommendationsServiceClient{cc}
}

func (c *healthRecommendationsServiceClient) GenerateHealthRecommendations(ctx context.Context, in *HealthRecommendationReq, opts ...grpc.CallOption) (*HealthRecommendation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthRecommendation)
	err := c.cc.Invoke(ctx, HealthRecommendationsService_GenerateHealthRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationsServiceClient) GetHealthRecommendations(ctx context.Context, in *HealthRecommendationID, opts ...grpc.CallOption) (*HealthRecommendation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthRecommendation)
	err := c.cc.Invoke(ctx, HealthRecommendationsService_GetHealthRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationsServiceClient) GetAllHealthRecommendations(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserHealthRecommendation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserHealthRecommendation)
	err := c.cc.Invoke(ctx, HealthRecommendationsService_GetAllHealthRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationsServiceClient) GetRealtimeHealthMonitoring(ctx context.Context, in *Void, opts ...grpc.CallOption) (*MonitoringRealTime, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonitoringRealTime)
	err := c.cc.Invoke(ctx, HealthRecommendationsService_GetRealtimeHealthMonitoring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationsServiceClient) GetDailyHealthSummary(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Monitoring, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Monitoring)
	err := c.cc.Invoke(ctx, HealthRecommendationsService_GetDailyHealthSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationsServiceClient) GetWeeklyHealthSummary(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Monitoring, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Monitoring)
	err := c.cc.Invoke(ctx, HealthRecommendationsService_GetWeeklyHealthSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthRecommendationsServiceServer is the server API for HealthRecommendationsService service.
// All implementations must embed UnimplementedHealthRecommendationsServiceServer
// for forward compatibility
type HealthRecommendationsServiceServer interface {
	// ----------------- Health Recommendations --------------------
	GenerateHealthRecommendations(context.Context, *HealthRecommendationReq) (*HealthRecommendation, error)
	GetHealthRecommendations(context.Context, *HealthRecommendationID) (*HealthRecommendation, error)
	GetAllHealthRecommendations(context.Context, *UserID) (*UserHealthRecommendation, error)
	// ----------------- Health Monitoring -----------------------
	GetRealtimeHealthMonitoring(context.Context, *Void) (*MonitoringRealTime, error)
	GetDailyHealthSummary(context.Context, *Void) (*Monitoring, error)
	GetWeeklyHealthSummary(context.Context, *Void) (*Monitoring, error)
	mustEmbedUnimplementedHealthRecommendationsServiceServer()
}

// UnimplementedHealthRecommendationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHealthRecommendationsServiceServer struct {
}

func (UnimplementedHealthRecommendationsServiceServer) GenerateHealthRecommendations(context.Context, *HealthRecommendationReq) (*HealthRecommendation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateHealthRecommendations not implemented")
}
func (UnimplementedHealthRecommendationsServiceServer) GetHealthRecommendations(context.Context, *HealthRecommendationID) (*HealthRecommendation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthRecommendations not implemented")
}
func (UnimplementedHealthRecommendationsServiceServer) GetAllHealthRecommendations(context.Context, *UserID) (*UserHealthRecommendation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHealthRecommendations not implemented")
}
func (UnimplementedHealthRecommendationsServiceServer) GetRealtimeHealthMonitoring(context.Context, *Void) (*MonitoringRealTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtimeHealthMonitoring not implemented")
}
func (UnimplementedHealthRecommendationsServiceServer) GetDailyHealthSummary(context.Context, *Void) (*Monitoring, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyHealthSummary not implemented")
}
func (UnimplementedHealthRecommendationsServiceServer) GetWeeklyHealthSummary(context.Context, *Void) (*Monitoring, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyHealthSummary not implemented")
}
func (UnimplementedHealthRecommendationsServiceServer) mustEmbedUnimplementedHealthRecommendationsServiceServer() {
}

// UnsafeHealthRecommendationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthRecommendationsServiceServer will
// result in compilation errors.
type UnsafeHealthRecommendationsServiceServer interface {
	mustEmbedUnimplementedHealthRecommendationsServiceServer()
}

func RegisterHealthRecommendationsServiceServer(s grpc.ServiceRegistrar, srv HealthRecommendationsServiceServer) {
	s.RegisterService(&HealthRecommendationsService_ServiceDesc, srv)
}

func _HealthRecommendationsService_GenerateHealthRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRecommendationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationsServiceServer).GenerateHealthRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationsService_GenerateHealthRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationsServiceServer).GenerateHealthRecommendations(ctx, req.(*HealthRecommendationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationsService_GetHealthRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRecommendationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationsServiceServer).GetHealthRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationsService_GetHealthRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationsServiceServer).GetHealthRecommendations(ctx, req.(*HealthRecommendationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationsService_GetAllHealthRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationsServiceServer).GetAllHealthRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationsService_GetAllHealthRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationsServiceServer).GetAllHealthRecommendations(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationsService_GetRealtimeHealthMonitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationsServiceServer).GetRealtimeHealthMonitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationsService_GetRealtimeHealthMonitoring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationsServiceServer).GetRealtimeHealthMonitoring(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationsService_GetDailyHealthSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationsServiceServer).GetDailyHealthSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationsService_GetDailyHealthSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationsServiceServer).GetDailyHealthSummary(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationsService_GetWeeklyHealthSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationsServiceServer).GetWeeklyHealthSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationsService_GetWeeklyHealthSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationsServiceServer).GetWeeklyHealthSummary(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthRecommendationsService_ServiceDesc is the grpc.ServiceDesc for HealthRecommendationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthRecommendationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.HealthRecommendationsService",
	HandlerType: (*HealthRecommendationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateHealthRecommendations",
			Handler:    _HealthRecommendationsService_GenerateHealthRecommendations_Handler,
		},
		{
			MethodName: "GetHealthRecommendations",
			Handler:    _HealthRecommendationsService_GetHealthRecommendations_Handler,
		},
		{
			MethodName: "GetAllHealthRecommendations",
			Handler:    _HealthRecommendationsService_GetAllHealthRecommendations_Handler,
		},
		{
			MethodName: "GetRealtimeHealthMonitoring",
			Handler:    _HealthRecommendationsService_GetRealtimeHealthMonitoring_Handler,
		},
		{
			MethodName: "GetDailyHealthSummary",
			Handler:    _HealthRecommendationsService_GetDailyHealthSummary_Handler,
		},
		{
			MethodName: "GetWeeklyHealthSummary",
			Handler:    _HealthRecommendationsService_GetWeeklyHealthSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helath/health.proto",
}
