// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.1
// source: helath/wearable-data.proto

package healthAnalytics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Message2) Reset() {
	*x = Message2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_wearable_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message2) ProtoMessage() {}

func (x *Message2) ProtoReflect() protoreflect.Message {
	mi := &file_helath_wearable_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message2.ProtoReflect.Descriptor instead.
func (*Message2) Descriptor() ([]byte, []int) {
	return file_helath_wearable_data_proto_rawDescGZIP(), []int{0}
}

func (x *Message2) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type WearableDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	DeviceType   string `protobuf:"bytes,2,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	DataType     string `protobuf:"bytes,3,opt,name=dataType,proto3" json:"dataType,omitempty"`
	DataValue    string `protobuf:"bytes,4,opt,name=dataValue,proto3" json:"dataValue,omitempty"`
	RecordedTime string `protobuf:"bytes,5,opt,name=recordedTime,proto3" json:"recordedTime,omitempty"`
}

func (x *WearableDate) Reset() {
	*x = WearableDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_wearable_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableDate) ProtoMessage() {}

func (x *WearableDate) ProtoReflect() protoreflect.Message {
	mi := &file_helath_wearable_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableDate.ProtoReflect.Descriptor instead.
func (*WearableDate) Descriptor() ([]byte, []int) {
	return file_helath_wearable_data_proto_rawDescGZIP(), []int{1}
}

func (x *WearableDate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WearableDate) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *WearableDate) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *WearableDate) GetDataValue() string {
	if x != nil {
		return x.DataValue
	}
	return ""
}

func (x *WearableDate) GetRecordedTime() string {
	if x != nil {
		return x.RecordedTime
	}
	return ""
}

type UpdateWearableDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceType string `protobuf:"bytes,2,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	DataType   string `protobuf:"bytes,3,opt,name=dataType,proto3" json:"dataType,omitempty"`
	DataValue  string `protobuf:"bytes,4,opt,name=dataValue,proto3" json:"dataValue,omitempty"`
}

func (x *UpdateWearableDate) Reset() {
	*x = UpdateWearableDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_wearable_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWearableDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWearableDate) ProtoMessage() {}

func (x *UpdateWearableDate) ProtoReflect() protoreflect.Message {
	mi := &file_helath_wearable_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWearableDate.ProtoReflect.Descriptor instead.
func (*UpdateWearableDate) Descriptor() ([]byte, []int) {
	return file_helath_wearable_data_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateWearableDate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateWearableDate) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *UpdateWearableDate) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *UpdateWearableDate) GetDataValue() string {
	if x != nil {
		return x.DataValue
	}
	return ""
}

type AllWearableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearableData []*WearableDataResponse `protobuf:"bytes,1,rep,name=wearableData,proto3" json:"wearableData,omitempty"`
}

func (x *AllWearableData) Reset() {
	*x = AllWearableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_wearable_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllWearableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllWearableData) ProtoMessage() {}

func (x *AllWearableData) ProtoReflect() protoreflect.Message {
	mi := &file_helath_wearable_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllWearableData.ProtoReflect.Descriptor instead.
func (*AllWearableData) Descriptor() ([]byte, []int) {
	return file_helath_wearable_data_proto_rawDescGZIP(), []int{3}
}

func (x *AllWearableData) GetWearableData() []*WearableDataResponse {
	if x != nil {
		return x.WearableData
	}
	return nil
}

type WearableDataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	DeviceType string `protobuf:"bytes,3,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
}

func (x *WearableDataFilter) Reset() {
	*x = WearableDataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_wearable_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableDataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableDataFilter) ProtoMessage() {}

func (x *WearableDataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_helath_wearable_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableDataFilter.ProtoReflect.Descriptor instead.
func (*WearableDataFilter) Descriptor() ([]byte, []int) {
	return file_helath_wearable_data_proto_rawDescGZIP(), []int{4}
}

func (x *WearableDataFilter) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WearableDataFilter) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WearableDataFilter) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

type WearableDataID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WearableDataID) Reset() {
	*x = WearableDataID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_wearable_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableDataID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableDataID) ProtoMessage() {}

func (x *WearableDataID) ProtoReflect() protoreflect.Message {
	mi := &file_helath_wearable_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableDataID.ProtoReflect.Descriptor instead.
func (*WearableDataID) Descriptor() ([]byte, []int) {
	return file_helath_wearable_data_proto_rawDescGZIP(), []int{5}
}

func (x *WearableDataID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WearableDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	DeviceType   string `protobuf:"bytes,3,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	DataType     string `protobuf:"bytes,4,opt,name=dataType,proto3" json:"dataType,omitempty"`
	DataValue    string `protobuf:"bytes,5,opt,name=dataValue,proto3" json:"dataValue,omitempty"`
	RecordedTime string `protobuf:"bytes,6,opt,name=recordedTime,proto3" json:"recordedTime,omitempty"`
	CreatedAt    string `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *WearableDataResponse) Reset() {
	*x = WearableDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helath_wearable_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableDataResponse) ProtoMessage() {}

func (x *WearableDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_helath_wearable_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableDataResponse.ProtoReflect.Descriptor instead.
func (*WearableDataResponse) Descriptor() ([]byte, []int) {
	return file_helath_wearable_data_proto_rawDescGZIP(), []int{6}
}

func (x *WearableDataResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WearableDataResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WearableDataResponse) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *WearableDataResponse) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *WearableDataResponse) GetDataValue() string {
	if x != nil {
		return x.DataValue
	}
	return ""
}

func (x *WearableDataResponse) GetRecordedTime() string {
	if x != nil {
		return x.RecordedTime
	}
	return ""
}

func (x *WearableDataResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WearableDataResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_helath_wearable_data_proto protoreflect.FileDescriptor

var file_helath_wearable_data_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x68, 0x65, 0x6c, 0x61, 0x74, 0x68, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x22, 0x24, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0c, 0x57,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x7e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x53, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x12, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x20, 0x0a, 0x0e, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf8, 0x01, 0x0a,
	0x14, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0xf9, 0x02, 0x0a, 0x0c, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x57,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x41, 0x6c, 0x6c, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x57,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x44, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x42, 0x1b, 0x5a, 0x19, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_helath_wearable_data_proto_rawDescOnce sync.Once
	file_helath_wearable_data_proto_rawDescData = file_helath_wearable_data_proto_rawDesc
)

func file_helath_wearable_data_proto_rawDescGZIP() []byte {
	file_helath_wearable_data_proto_rawDescOnce.Do(func() {
		file_helath_wearable_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_helath_wearable_data_proto_rawDescData)
	})
	return file_helath_wearable_data_proto_rawDescData
}

var file_helath_wearable_data_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_helath_wearable_data_proto_goTypes = []any{
	(*Message2)(nil),             // 0: health.Message2
	(*WearableDate)(nil),         // 1: health.WearableDate
	(*UpdateWearableDate)(nil),   // 2: health.UpdateWearableDate
	(*AllWearableData)(nil),      // 3: health.AllWearableData
	(*WearableDataFilter)(nil),   // 4: health.WearableDataFilter
	(*WearableDataID)(nil),       // 5: health.WearableDataID
	(*WearableDataResponse)(nil), // 6: health.WearableDataResponse
}
var file_helath_wearable_data_proto_depIdxs = []int32{
	6, // 0: health.AllWearableData.wearableData:type_name -> health.WearableDataResponse
	1, // 1: health.WearableData.AddWearableData:input_type -> health.WearableDate
	5, // 2: health.WearableData.GetWearableData:input_type -> health.WearableDataID
	4, // 3: health.WearableData.GetAllWearableData:input_type -> health.WearableDataFilter
	2, // 4: health.WearableData.UpdateWearableData:input_type -> health.UpdateWearableDate
	5, // 5: health.WearableData.DeleteWearableData:input_type -> health.WearableDataID
	6, // 6: health.WearableData.AddWearableData:output_type -> health.WearableDataResponse
	6, // 7: health.WearableData.GetWearableData:output_type -> health.WearableDataResponse
	3, // 8: health.WearableData.GetAllWearableData:output_type -> health.AllWearableData
	6, // 9: health.WearableData.UpdateWearableData:output_type -> health.WearableDataResponse
	0, // 10: health.WearableData.DeleteWearableData:output_type -> health.Message2
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_helath_wearable_data_proto_init() }
func file_helath_wearable_data_proto_init() {
	if File_helath_wearable_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_helath_wearable_data_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Message2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_wearable_data_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*WearableDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_wearable_data_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateWearableDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_wearable_data_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AllWearableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_wearable_data_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*WearableDataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_wearable_data_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*WearableDataID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helath_wearable_data_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*WearableDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_helath_wearable_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_helath_wearable_data_proto_goTypes,
		DependencyIndexes: file_helath_wearable_data_proto_depIdxs,
		MessageInfos:      file_helath_wearable_data_proto_msgTypes,
	}.Build()
	File_helath_wearable_data_proto = out.File
	file_helath_wearable_data_proto_rawDesc = nil
	file_helath_wearable_data_proto_goTypes = nil
	file_helath_wearable_data_proto_depIdxs = nil
}
